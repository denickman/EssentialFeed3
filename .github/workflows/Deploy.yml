
name: Deploy to App Store
# gpg --symmetric --cipher-algo AES256 --output prod_profile.mobileprovision.gpg prod_profile.mobileprovision
# gpg --symmetric --cipher-algo AES256 --output prod_cert.p12.gpg prod_cert.p12

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install provisioning profiles
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET }}" --output prod_profile.mobileprovision .github/deployment/prod_profile.mobileprovision.gpg
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp prod_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

          echo "check !!!!"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ | grep prod_profile.mobileprovision
          security cms -D -i prod_profile.mobileprovision | plutil -p -

      - name: Install certificates
        run: |
          echo "GPG"
          gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET }}" --output prod_certificate.p12 .github/deployment/prod_cert.p12.gpg
          # echo "SEC"

          echo "decryption prod_certificate.p12.gpg OK"

          # Расшифровка dev_certificate.p12.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET }}" --output dev_certificate.p12 .github/deployment/dev_cert.p12.gpg
          echo "decryption dev_certificate.p12.gpg OK"

          # Создание ключницы
          security create-keychain -p "" build.keychain
          echo "import prod_certificate"

          # Импорт prod_certificate.p12 в ключницу
          security import prod_certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -A
          echo "import prod_certificate OK"

          echo "import dev_certificate"

          # Импорт dev_certificate.p12 в ключницу
          security import dev_certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -A
          echo "import dev_certificate OK"

          # Список ключниц
          security list-keychains -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain


          echo "check !!!!"
          security find-identity -p codesigning

      - name: Select Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_16.1.app
          echo ">> availale xcode versions"
          xcode-select -p
          echo ">> current version"
          xcodebuild -version

      - name: Debug ExportOptions.plist
        run: cat .github/deployment/ExportOptions.plist

      - name: Increment Build Number with agvtool
        run: |
            cd EssentialApp
            ls -la
            agvtool new-version -all $((GITHUB_RUN_NUMBER + 1))
            echo "New build number set to: $((GITHUB_RUN_NUMBER + 1))"
            agvtool what-version

      - name: Clean Build
        run: |
            ls -la
            xcodebuild clean -workspace EssentialApp.xcworkspace -scheme EssentialApp

      - name: Build and Archive
        run: |

          pwd
          ls -la

          xcodebuild clean archive \
            -sdk iphoneos \
            -workspace EssentialApp.xcworkspace \
            -configuration Release \
            -scheme EssentialApp \
            -derivedDataPath /Users/runner/work/EFM/EFM/DerivedData \
            -archivePath /Users/runner/work/EFM/EFM/DerivedData/Archive/EssentialApp.xcarchive | tee xcodebuild.log

      - name: List EssentialApp workspace Files
        run: |
          ls -la
          xcodebuild -list -workspace EssentialApp.xcworkspace

      - name: Export .ipa
        run: |

          ls -la

          xcodebuild -exportArchive \
            -archivePath /Users/runner/work/EFM/EFM/DerivedData/Archive/EssentialApp.xcarchive \
            -exportOptionsPlist .github/deployment/ExportOptions.plist \
            -exportPath DerivedData/ipa | tee export.log

      - name: Save API Key to file
        run: |
          mkdir -p ~/private_keys
          cp .github/deployment/AuthKey_PV59767J7K.p8 ~/private_keys/
          echo "Path and File Exist"
          ls -la ~/private_keys/

      - name: Inspect IPA Info.plist
        run: |
            unzip -p DerivedData/ipa/EssentialApp.ipa Payload/EssentialApp.app/Info.plist | plutil -p -

      - name: Upload IPA to TestFlight
        run: |
          xcrun altool --upload-app --type ios \
            --file DerivedData/ipa/EssentialApp.ipa \
            --apiKey "${{ secrets.APP_STORE_KEY_ID }}" \
            --apiIssuer "${{ secrets.APP_STORE_ISSUER_ID }}" \
            --authKeyPath "$HOME/private_keys/AuthKey_PV59767J7K.p8" \
            --verbose | tee upload.log
